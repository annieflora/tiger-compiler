Tiger {
  Program      = Exp
  Exp          = "let" Dec+ "in" Exps "end"             -- let
               | "if" Exp "then" Exp ("else" Exp)?      -- if
               | "while" Exp "do" Exp                   -- while
               | "for" id ":=" Exp "to" Exp "do" Exp    -- for
               | Var ":=" Exp                           -- assign
               | "break"                                -- break
               | Exp1
  Dec          = TypeDec | VarDec | FunDec
  TypeDec      = "type" typeId "=" Type
  Type         = typeId                                 -- named
               | ArrayType
               | RecordType
  ArrayType    = "array" "of" typeId
  RecordType   = "{" ListOf<FieldDec, ","> "}"
  FieldDec     = id ":" typeId
  FunDec       = "function" id "(" ListOf<FieldDec, ","> ")" (":" typeId)? "=" Exp
  VarDec       = "var" id (":" typeId)? ":=" Exp
  Exps         = ListOf<Exp, ";">
  Exp1         = Exp1 "|" Exp2                          -- binary
               | Exp2
  Exp2         = Exp2 "&" Exp3                          -- binary
               | Exp3
  Exp3         = Exp4 relop Exp4                        -- binary
               | Exp4
  Exp4         = Exp4 addop Exp5                        -- binary
               | Exp5
  Exp5         = Exp5 mulop Exp6                        -- binary
               | Exp6
  Exp6         = "-" Exp7                               -- negation
               | Exp7
  Exp7         = Call | ArrayExp | RecordExp | ExpSeq | Literal | Var
  Literal      = intlit
               | stringlit
               | "nil"                                  -- nil
  Var          = Var "[" Exp "]"                        -- subscripted
               | Var "." id                             -- field
               | id
  ArrayExp     = typeId "[" Exp "]" "of" Exp
  RecordExp    = typeId "{" ListOf<FieldBind, ","> "}"
  FieldBind    = id "=" Exp
  Call         = id "(" ListOf<Exp, ","> ")"
  ExpSeq       = "(" ListOf<Exp, ";"> ")"
  keyword      = ("array" | "break" | "do" | "else" | "end" | "for" | "function"
               | "if" | "in" | "let" | "nil" | "of" | "then" | "to" | "type"
               | "var" | "while") ~idrest
  id           = ~keyword letter idrest*
  idrest       = letter | digit | "_"
  typeId       = id
  intlit       = digit+
  stringlit    = "\"" char* "\""
  char         = ~"\\" ~"\"" ~"\n" any | escape
  escape       = "\\" ("\\" | "\"" | "n" | "t" | codepoint)
  codepoint    = "u{" hexDigit+ "}"
  mulop        = "*" | "/"
  addop        = "+" | "-"
  relop        = "<=" | "<>" | "<" | ">=" | ">" | "="
  space       := " " | "\t" | "\n" | comment
  comment      = "/*" (~"*/" any)* "*/"
}
