LetExp {
  decs:
   [ TypeDec {
       id: 'point',
       type:
        RecordType {
          fields:
           [ Field { id: 'x', type: 'int' },
             Field { id: 'y', type: 'int' } ] } },
     Variable { id: 'x', type: 'int', init: Literal { value: 2 } },
     Func {
       id: 'f',
       params:
        [ Param { id: 'z', type: 'int' },
          Param { id: 's', type: 'string' } ],
       returnType: 'int',
       body:
        BinaryExp {
          op: '-',
          left:
           BinaryExp {
             op: '+',
             left: IdExp { ref: 'z' },
             right: Call { callee: 'size', args: [ IdExp { ref: 's' } ] } },
          right: IdExp { ref: 'x' } } },
     Variable {
       id: 'p',
       type: null,
       init:
        RecordExp {
          type: 'point',
          bindings:
           [ Binding { id: 'x', value: Literal { value: 2 } },
             Binding { id: 'y', value: Literal { value: 8 } } ] } } ],
  body:
   [ ForExp {
       index: 'i',
       low: Literal { value: 0 },
       high: IdExp { ref: 'x' },
       body:
        Call {
          callee: 'print',
          args:
           [ Call {
               callee: 'concat',
               args:
                [ Call {
                    callee: 'f',
                    args:
                     [ Call {
                         callee: 'chr',
                         args: [ MemberExp { record: IdExp { ref: 'p' }, id: 'y' } ] },
                       Literal { value: 'hello' } ] },
                  Literal { value: '\\u{1f937}\\n' } ] } ] } } ] }
